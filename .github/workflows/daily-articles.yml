name: Daily Article Generation

on:
  schedule:
    # 平日午前9時（JST = UTC 0:00）
    - cron: "0 0 * * 1-5"
  workflow_dispatch: # 手動実行
  push:
    branches:
      - main
    paths:
      - 'backend/services/source_aggregator_service.py'
      - 'backend/services/content_automation_service.py'
      - 'backend/models/automated_content.py'
      - 'scripts/generate_daily_article.py'
      - '.github/workflows/daily-articles.yml'

jobs:
  generate-articles:
    name: Generate Daily Articles
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Check Python version
        run: |
          python3 --version
          pip --version

      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          pip install feedparser  # For RSS parsing

      - name: Verify dependencies installed
        run: |
          cd backend
          pip list | grep -E "(requests|feedparser|sqlalchemy)" || exit 1

      - name: Check database connection
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          python3 -c "from pathlib import Path; import sys; sys.path.insert(0, str(Path('backend'))); from database import SessionLocal; db = SessionLocal(); db.close(); print('✅ Database connection OK')"

      - name: Verify scripts exist
        run: |
          test -f scripts/generate_daily_article.py || exit 1
          test -x scripts/generate_daily_article.py || exit 1
          echo "✅ Script exists and is executable"

      - name: Run article generation
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          python3 scripts/generate_daily_article.py

      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '❌ Daily Article Generation Failed',
              body: `Daily article generation failed on ${new Date().toISOString()}\n\nCheck the [workflow run](${context.payload.repository.html_url}/actions/runs/${context.runId}) for details.`,
              labels: ['automation', 'bug']
            })